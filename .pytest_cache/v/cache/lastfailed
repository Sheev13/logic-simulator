{
  "test_parser.py::test_parse_network_comments": true,
  "test_parser.py::test_parse_network_no_errors": true,
  "test_parser.py::test_parse_network_with_errors": true,
  "test_parser_errors.py::TestParserConnections::()::test_parse_connection_semantic": true,
  "test_parser_errors.py::TestParserConnections::()::test_parse_connections_list_wrapper[symbol_list0-True-4-0]": true,
  "test_parser_errors.py::TestParserConnections::()::test_parse_connections_list_wrapper[symbol_list1-False-4-1]": true,
  "test_parser_errors.py::TestParserConnections::()::test_parse_connections_list_wrapper[symbol_list2-False-2-1]": true,
  "test_parser_errors.py::TestParserConnections::()::test_parse_signal[missing_end_marker_signal.txt-True-G1-I1-1]": true,
  "test_parser_errors.py::TestParserConnections::()::test_parse_signal[missing_port_name_signal.txt-False-G1-I1-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_device_already_present": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_id[device_id_missing.txt-False-None-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_id[device_id_missing_semicolon.txt-True-A-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_id[device_id_name_syntax.txt-False-None-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_kind[device_kind_missing.txt-False-None-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_kind[device_kind_missing_semicolon.txt-True-NOR-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_kind[device_kind_simple_syntax.txt-False-None-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_missing_semicolon_handling": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_optional_qual[parse_device_should_have_qual.txt-0-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_qual[device_qual_missing.txt-False-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_qual[device_qual_not_number.txt-False-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_semantic": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_devices_list[symbol_list0-True-0-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_devices_list[symbol_list1-False-1-1]": true,
  "test_parser_errors.py::TestParserDevices::()::test_parse_devices_list[symbol_list2-False-1-0]": true,
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_device_id[er_parse_device_bad_id.txt-kind]": true,
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_device_id[er_parse_device_id_missing_semicolon.txt-{]": true,
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_devices_list[er_device_list_missing_end_semicolon.txt-MONITORS]": true,
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_devices_list[er_device_list_missing_open_square.txt-CONNECTIONS]": true,
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitor_semantic[parse_monitor_semantic.txt-0-1]": true,
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitor_semantic[parse_monitor_syntax_semantic.txt-1-1]": true,
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitors_list[symbol_list0-True-4-0]": true,
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitors_list[symbol_list1-False-4-1]": true,
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitors_list[symbol_list2-False-2-1]": true,
  "test_parser_errors.py::test_empty_file": true,
  "test_parser_errors.py::test_unclosed_comment_handling[within_connections.txt-2]": true,
  "test_parser_errors.py::test_unclosed_comment_handling[within_connections.txt-3]": true,
  "test_parser_errors.py::test_unclosed_comment_handling[within_devices.txt-2]": true,
  "test_parser_errors.py::test_unclosed_comment_handling[within_monitors.txt-3]": true,
  "test_scanner.py::test__open_file": true
}
[
  "test_devices.py::test_get_device",
  "test_devices.py::test_find_devices",
  "test_devices.py::test_make_device",
  "test_devices.py::test_make_device_gives_errors[(AND1_ID, new_devices.AND, 17)-new_devices.INVALID_QUALIFIER]",
  "test_devices.py::test_make_device_gives_errors[(SW1_ID, new_devices.SWITCH, None)-new_devices.NO_QUALIFIER]",
  "test_devices.py::test_make_device_gives_errors[(X1_ID, new_devices.XOR, 2)-new_devices.QUALIFIER_PRESENT]",
  "test_devices.py::test_make_device_gives_errors[(D_ID, D_ID, None)-new_devices.BAD_DEVICE]",
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, 0)-new_devices.INVALID_QUALIFIER]",
  "test_devices.py::test_make_device_gives_errors[(CL_ID, new_devices.CLOCK, 10)-new_devices.NO_ERROR]",
  "test_devices.py::test_make_device_gives_errors[(X2_ID, new_devices.XOR)-new_devices.DEVICE_PRESENT]",
  "test_devices.py::test_get_signal_name",
  "test_devices.py::test_get_signal_ids",
  "test_devices.py::test_set_switch",
  "test_monitors.py::test_make_monitor",
  "test_monitors.py::test_make_monitor_gives_errors",
  "test_monitors.py::test_remove_monitor",
  "test_monitors.py::test_get_signal_names",
  "test_monitors.py::test_record_signals",
  "test_monitors.py::test_get_margin",
  "test_monitors.py::test_reset_monitors",
  "test_monitors.py::test_display_signals_console",
  "test_monitors.py::test_display_signals_gui",
  "test_names.py::test_unique_error_codes",
  "test_names.py::test_unique_error_codes_gives_errors",
  "test_names.py::test_query",
  "test_names.py::test_lookup",
  "test_names.py::test_lookup_gives_errors",
  "test_names.py::test_get_name_string",
  "test_names.py::test_get_name_string_gives_errors",
  "test_network.py::test_get_connected_output",
  "test_network.py::test_get_input_signal",
  "test_network.py::test_get_output_signal",
  "test_network.py::test_check_network",
  "test_network.py::test_make_connection",
  "test_network.py::test_make_connection_gives_error[(I1, I1, OR1_ID, I2)-network.DEVICE_ABSENT]",
  "test_network.py::test_make_connection_gives_error[(OR1_ID, I2, OR1_ID, I2)-network.INPUT_TO_INPUT]",
  "test_network.py::test_make_connection_gives_error[(SW1_ID, None, OR1_ID, None)-network.OUTPUT_TO_OUTPUT]",
  "test_network.py::test_make_connection_gives_error[(SW1_ID, I1, OR1_ID, I2)-network.PORT_ABSENT]",
  "test_network.py::test_make_connection_gives_error[(SW2_ID, None, OR1_ID, I2)-network.NO_ERROR]",
  "test_network.py::test_make_connection_gives_error[(OR1_ID, I2, SW2_ID, None)-network.NO_ERROR]",
  "test_network.py::test_make_connection_gives_error[(SW1_ID, None, OR1_ID, I1)-network.INPUT_CONNECTED]",
  "test_network.py::test_execute_xor",
  "test_network.py::test_execute_non_xor_gates[AND1_ID-switch_outputs0-LOW-devices.AND]",
  "test_network.py::test_execute_non_xor_gates[AND1_ID-switch_outputs1-HIGH-devices.AND]",
  "test_network.py::test_execute_non_xor_gates[NAND1_ID-switch_outputs2-LOW-devices.NAND]",
  "test_network.py::test_execute_non_xor_gates[NAND1_ID-switch_outputs3-HIGH-devices.NAND]",
  "test_network.py::test_execute_non_xor_gates[OR1_ID-switch_outputs4-LOW-devices.OR]",
  "test_network.py::test_execute_non_xor_gates[OR1_ID-switch_outputs5-HIGH-devices.OR]",
  "test_network.py::test_execute_non_xor_gates[NOR1_ID-switch_outputs6-LOW-devices.NOR]",
  "test_network.py::test_execute_non_xor_gates[NOR1_ID-switch_outputs7-HIGH-devices.NOR]",
  "test_network.py::test_execute_non_gates",
  "test_network.py::test_oscillating_network",
  "test_parser.py::test_parse_network_no_errors",
  "test_parser.py::test_parse_network_with_errors",
  "test_parser.py::test_parse_network_comments",
  "test_parser_errors.py::TestParserDevices::()::test_parse_devices_list[symbol_list0-True-0-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_devices_list[symbol_list1-False-1-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_devices_list[symbol_list2-False-1-0]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_semantic",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_missing_semicolon_handling",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_optional_qual[parse_device_optional_qual.txt-0-0]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_optional_qual[parse_device_should_have_qual.txt-0-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_id[device_id_correct.txt-False-A-0]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_id[device_id_name_syntax.txt-False-None-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_id[device_id_missing.txt-False-None-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_id[device_id_missing_semicolon.txt-True-A-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_kind[device_kind_correct.txt-False-NOR-0]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_kind[device_kind_simple_syntax.txt-False-None-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_kind[device_kind_missing.txt-False-None-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_kind[device_kind_missing_semicolon.txt-True-NOR-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_qual[device_qual_correct.txt-False-0]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_qual[device_qual_not_number.txt-False-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_qual[device_qual_missing.txt-False-1]",
  "test_parser_errors.py::TestParserDevices::()::test_parse_device_qual[device_qual_missing_semicolon.txt-True-1]",
  "test_parser_errors.py::TestParserConnections::()::test_parse_connections_list_wrapper[symbol_list0-True-4-0]",
  "test_parser_errors.py::TestParserConnections::()::test_parse_connections_list_wrapper[symbol_list1-False-4-1]",
  "test_parser_errors.py::TestParserConnections::()::test_parse_connections_list_wrapper[symbol_list2-False-2-1]",
  "test_parser_errors.py::TestParserConnections::()::test_parse_connection_semantic",
  "test_parser_errors.py::TestParserConnections::()::test_parse_signal[A_signal.txt-False-A-None-0]",
  "test_parser_errors.py::TestParserConnections::()::test_parse_signal[G1I1_signal.txt-False-G1-I1-0]",
  "test_parser_errors.py::TestParserConnections::()::test_parse_signal[missing_end_marker_signal.txt-True-G1-I1-1]",
  "test_parser_errors.py::TestParserConnections::()::test_parse_signal[missing_port_name_signal.txt-False-G1-I1-1]",
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitors_list[symbol_list0-True-4-0]",
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitors_list[symbol_list1-False-4-1]",
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitors_list[symbol_list2-False-2-1]",
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitor_semantic[parse_monitor_semantic.txt-0-1]",
  "test_parser_errors.py::TestParserMonitors::()::test_parse_monitor_semantic[parse_monitor_syntax_semantic.txt-1-1]",
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_devices_list[er_device_list_missing_end_semicolon.txt-MONITORS]",
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_devices_list[er_device_list_missing_open_square.txt-CONNECTIONS]",
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_device_id[er_parse_device_bad_id.txt-kind]",
  "test_parser_errors.py::TestParserErrorRecovery::()::test_error_recovery_parse_device_id[er_parse_device_id_missing_semicolon.txt-{]",
  "test_parser_errors.py::test_empty_file",
  "test_scanner.py::test_get_symbol",
  "test_scanner.py::test_show_error"
]